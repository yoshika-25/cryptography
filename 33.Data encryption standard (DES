#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define DES_KEY_SIZE 8 // 56-bit key is 8 bytes long

// Initial Permutation table (IP)
int IP[] = {58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7, 59, 51, 43, 35, 27, 19, 11, 3,
            62, 54, 46, 38, 30, 22, 14, 6};

int IP_inv[] = {40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
                38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
                36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
                34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};

// Permutation Choice 1 (PC-1)
int PC1[] = {57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
             59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 28, 20, 12, 4,
             61, 53, 45, 37, 29, 21, 13, 5, 62, 54, 46, 38, 30, 22, 14, 6,
             63, 55, 47, 39, 31, 23, 15, 7};

// Permutation Choice 2 (PC-2)
int PC2[] = {14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,
             26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40,
             51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};

// Expansion (E)
int E[] = {32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13,
           14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
           24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1};

// S-boxes
int S[8][4][16] = { 
    // S1
    {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
     {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
     {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
     {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}},
    
    // S2
    {{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
     {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
     {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 9, 3, 15, 2, 6},
     {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 14, 11, 9, 0, 6, 2}},
    
    // Other S-boxes (S3, S4, S5, S6, S7, S8) omitted for brevity...
};

// Final permutation table (FP)
int FP[] = {40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};

// Rotate left function (used in key schedule)
void rotate_left(uint32_t *x, int n) {
    *x = ((*x) << n) | ((*x) >> (32 - n));
}

// Apply a permutation table to a block
void permute(uint64_t *block, int *table, int size) {
    uint64_t permuted = 0;
    for (int i = 0; i < size; i++) {
        permuted |= ((*block >> (64 - table[i])) & 1) << (size - 1 - i);
    }
    *block = permuted;
}

// XOR two 64-bit blocks
void xor_blocks(uint64_t *block1, uint64_t *block2) {
    *block1 ^= *block2;
}

// DES Initial and Final Permutation
void des_permute(uint64_t *block) {
    permute(block, IP, 64);
}

// DES Final Permutation
void des_final_permute(uint64_t *block) {
    permute(block, IP_inv, 64);
}

int main() {
    // Example input: 64-bit plaintext and a 56-bit key
    uint64_t plain_text = 0x1234567890ABCDEF; // Example plaintext (64 bits)
    uint64_t key = 0x133457799BBCDFF1; // Example 56-bit key

    printf("Original Plaintext: 0x%lx\n", plain_text);

    // Step 1: Apply Initial Permutation (IP)
    des_permute(&plain_text);
    printf("After Initial Permutation: 0x%lx\n", plain_text);

    // Step 2: Key schedule (not implemented here for simplicity)

    // Step 3: Main encryption rounds (not fully implemented)

    // Step 4: Apply Final Permutation (FP)
    des_final_permute(&plain_text);
    printf("After Final Permutation: 0x%lx\n", plain_text);

    return 0;
}
