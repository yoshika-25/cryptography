#include <stdio.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to find modular inverse
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

// Affine decryption
char decryptAffine(char c, int a, int b, int a_inv) {
    if (isupper(c))
        return (char)(((a_inv * ((c - 'A' - b + ALPHABET_SIZE)) % ALPHABET_SIZE)) + 'A');
    return c;
}

int main() {
    char ciphertext[] = "BEXAMPLE"; // Replace with actual ciphertext
    int a = 5; // Example value, replace with correct one
    int b = 8; // Replace with actual b value
    int a_inv = modInverse(a, ALPHABET_SIZE);

    if (a_inv == -1) {
        printf("No modular inverse exists for a = %d under mod %d\n", a, ALPHABET_SIZE);
        return 1;
    }

    printf("Decrypted Text: ");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        printf("%c", decryptAffine(ciphertext[i], a, b, a_inv));
    }
    printf("\n");
    return 0;
}
